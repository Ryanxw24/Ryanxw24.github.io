<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>常见排序算法总结</title>
    <url>/2021/09/13/sort/</url>
    <content><![CDATA[<p>本文介绍的几种排序算法的时间复杂度、额外空间复杂度、稳定性如下：</p>
<table>
<thead>
<tr>
<th>排序算法</th>
<th>平均时间复杂度</th>
<th>额外空间复杂度</th>
<th>稳定性</th>
</tr>
</thead>
<tbody><tr>
<td>bubble</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>yes</td>
</tr>
<tr>
<td>insert</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>yes</td>
</tr>
<tr>
<td>select</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>no</td>
</tr>
<tr>
<td>merge</td>
<td>O(n*logn)</td>
<td>O(n)</td>
<td>yes</td>
</tr>
<tr>
<td>heap</td>
<td>O(n*logn)</td>
<td>O(1)</td>
<td>no</td>
</tr>
<tr>
<td>quick</td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
<td>no</td>
</tr>
</tbody></table>
<p>稳定性概念：保证集合中的元素在排序后的相对次序和排序前为一致则是稳定的。例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始顺序：[a1, b1, a2, a3, c5]</span><br><span class="line">排序顺序：[a1, a2, a3, b1, c5]</span><br><span class="line">其中三个a类型的相对次序没有发生变化则表示是稳定的。</span><br></pre></td></tr></table></figure>

<h1 id="1-bubble-sort"><a href="#1-bubble-sort" class="headerlink" title="1. bubble sort"></a>1. bubble sort</h1><ul>
<li>原理：每一轮将该集合的元素中最大的一个沉底即可。</li>
<li>例子：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">  第<span class="number">1</span>轮：实现将最大的<span class="number">8</span>放到最后一个位置</span><br><span class="line">  [<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>]</span><br><span class="line">  </span><br><span class="line">  第<span class="number">2</span>轮：实现将最大的<span class="number">7</span>放到倒数第<span class="number">2</span>个位置</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>] -&gt;</span><br><span class="line">  [<span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>] -&gt;</span><br><span class="line">  [<span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">8</span>] -&gt;</span><br><span class="line">  [<span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">  以此类推，若集合的大小是n，则需要进行n轮，每轮比较n次</span><br><span class="line">  则时间复杂度为<span class="built_in">O</span>(n^<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
<li>实现：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="2-insert-sort"><a href="#2-insert-sort" class="headerlink" title="2. insert sort"></a>2. insert sort</h1><ul>
<li>原理：将<code>index = 0</code>的位置看作是一个有序区，之后将后续的元素按照大小插入到有序区对应的位置即可。</li>
<li>例子：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    第<span class="number">1</span>轮：[<span class="number">7</span>]是有序区</span><br><span class="line">    [<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    第<span class="number">2</span>轮：[<span class="number">6</span>, <span class="number">7</span>]是有序区</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    第<span class="number">3</span>轮：[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]是有序区</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    以此类推，若集合的大小是n，则需要进行n轮，</span><br><span class="line">    比较的次数是一个等差数列的和，则时间复杂度为<span class="built_in">O</span>(n^<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
<li>实现：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-select-sort"><a href="#3-select-sort" class="headerlink" title="3. select sort"></a>3. select sort</h1></li>
<li>原理：从元素中找出最小的数放到集合的<code>index=0</code>的位置，之后轮询n次每次将最小的数放到有序集合后面即可。</li>
<li>例子：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    第<span class="number">1</span>轮：选择最小的元素<span class="number">0</span>放到起始位置</span><br><span class="line">    [<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>] </span><br><span class="line">    </span><br><span class="line">    以此类推，若集合大小是n，则需要进行n轮，</span><br><span class="line">    比较的次数是一个等差数列的和，则时间复杂度为<span class="built_in">O</span>(n^<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
<li>实现：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i])&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-merge-sort"><a href="#4-merge-sort" class="headerlink" title="4. merge sort"></a>4. merge sort</h1></li>
<li>原理：不停的将集合二分（逻辑上的划分），直到元素不能再划分为止，则申请对应的空间按相对大小填充返回即可。</li>
<li>例子：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">    第<span class="number">1</span>轮：以 index = <span class="number">2</span> 开始划分</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>]  [<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    第<span class="number">2</span>轮：将第<span class="number">1</span>轮的集合左右各自继续划分</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>] [<span class="number">4</span>] [<span class="number">5</span>, <span class="number">3</span>] [<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    第<span class="number">3</span>轮：将第<span class="number">2</span>轮中可以划分的继续划分</span><br><span class="line">    [<span class="number">2</span>] [<span class="number">1</span>] [<span class="number">4</span>] [<span class="number">5</span>] [<span class="number">3</span>] [<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    第<span class="number">4</span>轮：按照划分好的结果通过大小逆序向上合并填充即可</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>] [<span class="number">4</span>] [<span class="number">3</span>, <span class="number">5</span>] [<span class="number">6</span>] -&gt;</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>] [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>] -&gt; </span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li>
<li>实现：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(a, l, mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(a, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">merge</span>(a, l, mid, r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> help[len];</span><br><span class="line">    <span class="keyword">int</span> help_idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p1 = l;</span><br><span class="line">    <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= r)&#123;</span><br><span class="line">        help[help_idx++] = a[p1] &lt; a[p2] ? a[p1++] : a[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= mid)&#123;</span><br><span class="line">         help[help_idx++] = a[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= r)&#123;</span><br><span class="line">         help[help_idx++] = a[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        a[l + i] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>应用：<ul>
<li>小和问题：每个位置上左边有比该位置值小的所有的数的和。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2, 1, 4, 5, 3, 6]</span><br><span class="line">small_sum = (2 + 1) + </span><br><span class="line">            (2 + 1 + 4) + </span><br><span class="line">            (2 + 1) + </span><br><span class="line">            (1 + 2 + 3 + 4 + 5)</span><br><span class="line">在 merge 的过程中就可以计算出所有小和</span><br><span class="line">a[i] &lt; a[j] 则出现的次数总和为：(r - j + 1) * a[i]</span><br></pre></td></tr></table></figure></li>
<li>逆序对：每个位置右边有比该位置数小的数对个数。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2, 1, 4, 5, 3, 6]</span><br><span class="line">逆序对个数：</span><br><span class="line">[2, 1]</span><br><span class="line">[4, 3]</span><br><span class="line">[5, 3]</span><br><span class="line">在 merge 的过程中可以求取逆序对个数：</span><br><span class="line">a[i] &gt; a[j] 则逆序对的个数为：(mid - i + 1)</span><br></pre></td></tr></table></figure>
<h1 id="5-heap-sort"><a href="#5-heap-sort" class="headerlink" title="5. heap sort"></a>5. heap sort</h1></li>
</ul>
</li>
<li>原理：堆排的实现对应算法中的优先级队列，核心分为2步：<strong>建堆</strong>和<strong>调堆</strong><ul>
<li><p><strong>建堆</strong>：通过比较当前位置的树是否比起父节点大的方法来创建一个大根堆（以该节点为根的树是该节点是最大值）。建堆只需要在数组上调整即可，逻辑上对应的是一棵完全二叉树，时间复杂度为<code>O(n)</code>。<br>关注两点：</p>
<blockquote>
<p>父节点<code>index = i</code>，左右孩子节点<code>left = 2*i + 1, right = 2*i + 2</code>；<br>孩子节点<code>index = i</code>，父节点<code>fa = (i - 1) / 2</code></p>
</blockquote>
</li>
<li><p><strong>调堆</strong>：将堆的根节点调到最后一个叶子节点处（即数组的最后一个位置），剪枝，之后从根节点进行元素调整继续维护为一个大根堆的样子便于下次取到最大值元素，该操作的时间复杂度为<code>O(n*logn)</code></p>
</li>
</ul>
</li>
<li>例子：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">step1: 建堆，判断当前位置的数是否比其父亲节点大，若大则交换，则index从<span class="number">0</span>到N扫描，第i个节点树的高度为<span class="built_in">log</span>(i)</span><br><span class="line">则<span class="built_in">T</span>(N) = <span class="built_in">log</span>(<span class="number">1</span>) + <span class="built_in">log</span>(<span class="number">2</span>) + ... + <span class="built_in">log</span>(N) 可以在<span class="built_in">O</span>(N)内收敛</span><br><span class="line">[<span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>] -&gt;</span><br><span class="line">[<span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>] -&gt;</span><br><span class="line">[<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>] -&gt;</span><br><span class="line">[<span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">step2: 调堆 <span class="built_in">O</span>(N * logN)</span><br><span class="line">将<span class="number">7</span>置换到数组末尾进行剪枝后再进行调堆</span><br><span class="line">[<span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>] -&gt;</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, (<span class="number">7</span>)] -&gt;</span><br><span class="line">[<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, (<span class="number">7</span>)]</span><br><span class="line"></span><br><span class="line">以此类推直到取完最后一个节点为止即可</span><br></pre></td></tr></table></figure></li>
<li>例子示例图：<ul>
<li>建堆图：<!-- ![](./sort/建堆过程.png)  该形式是在预览时使用 -->
<!-- ![](建堆过程.png)  该形式是在部署时使用-->
<img src="/2021/09/13/sort/%E5%BB%BA%E5%A0%86%E8%BF%87%E7%A8%8B.png"> </li>
<li>剪枝调堆图：<br><img src="/2021/09/13/sort/%E5%89%AA%E6%9E%9D%E8%B0%83%E5%A0%86.png"></li>
</ul>
</li>
<li>实现：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        <span class="built_in">heapInsert</span>(a, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> size = len;</span><br><span class="line">    <span class="built_in">swap</span>(a[<span class="number">0</span>], a[--size]);</span><br><span class="line">    <span class="keyword">while</span> (size &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">heapify</span>(a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="built_in">swap</span>(a[<span class="number">0</span>], a[--size]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (a[index] &gt; a[(index - <span class="number">1</span>) / <span class="number">2</span>])&#123;</span><br><span class="line">        <span class="built_in">swap</span>(a[index], a[(index - <span class="number">1</span>) / <span class="number">2</span>]);</span><br><span class="line">        index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> index, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; size)&#123;</span><br><span class="line">        <span class="keyword">int</span> largest = left + <span class="number">1</span> &lt; size &amp;&amp; a[left + <span class="number">1</span>] &gt; a[left] ? left + <span class="number">1</span> : left;</span><br><span class="line">        largest = a[largest] &gt; a[index] ? largest : index;</span><br><span class="line">        <span class="keyword">if</span> (largest == index)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(a[largest], a[index]);</span><br><span class="line">        index = largest;</span><br><span class="line">        left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6-quick-sort"><a href="#6-quick-sort" class="headerlink" title="6. quick sort"></a>6. quick sort</h1></li>
<li>原理：核心<code>partition</code>过程来将数组按照随机选定一个值<code>p</code>将元素划分为<code>&lt;p, =p, &gt;p</code>三个区域，将等于区域返回之后继续递归划分直到不能划分结束。<ul>
<li>随机选定元素的原因：从规模上减少每次选择的划分值不好，增大递归的规模，从而使时间复杂度退化为<code>O(n^2)</code>。</li>
<li>递归划分时每次都选择中间值，则递归规模每次为<code>n/2</code>，根据<code>master</code>公式可以得知<code>T(N) = 2 * T(N / 2) + O(N^1)</code>，则时间复杂度收敛到<code>O(N*logN)</code>。</li>
</ul>
</li>
<li>例子：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">  step1: 假设随机选取划分值p = <span class="number">4</span></span><br><span class="line">  step2: partition过程，根据p = <span class="number">4</span>进行划分，该过程时间复杂度<span class="built_in">O</span>(N)</span><br><span class="line">      a[i] &lt; p 时则小于区域扩大，小于区的下一个元素和a[i]交换，同时i自增</span><br><span class="line">      a[i] = p 时则等于区扩大，i自增</span><br><span class="line">      a[i] &gt; p 时则i保持不变，大于区前一个数和a[i]交换，大于区扩大</span><br><span class="line">    [<span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>] -&gt;</span><br><span class="line">    [<span class="number">0</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>] -&gt;</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] -&gt;</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>] -&gt;</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">  step3：将partition过程等于区域的index数组[<span class="number">3</span>, <span class="number">3</span>]返回用于下一次递归即可</span><br><span class="line"></span><br><span class="line">  额外空间复杂度 <span class="built_in">O</span>(N*logN)，用于保存partition过程中树的节点</span><br></pre></td></tr></table></figure></li>
<li>实现：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> r_index = l + <span class="built_in">rand</span>() % (r - l + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>(a[r_index], a[r]);</span><br><span class="line">        <span class="keyword">int</span> *parr = <span class="built_in">partition</span>(a, l, r);</span><br><span class="line">        <span class="built_in">quickSort</span>(a, l, parr[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quickSort</span>(a, parr[<span class="number">1</span>] + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> less = l - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> more = r;</span><br><span class="line">    <span class="keyword">int</span> *parr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> m = l;</span><br><span class="line">    <span class="keyword">while</span> (m &lt; more)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[m] &lt; a[r])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[++less], a[m++]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (a[m] == a[r])&#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[m], a[--more]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(a[r], a[more]);</span><br><span class="line">    parr[<span class="number">0</span>] = less + <span class="number">1</span>;</span><br><span class="line">    parr[<span class="number">1</span>] = more;</span><br><span class="line">    <span class="keyword">return</span> parr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>master公式普及<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">T</span>(N) = a * <span class="built_in">T</span>(N / b) + <span class="built_in">O</span>(N^d)</span><br><span class="line">(<span class="number">1</span>) <span class="built_in">logb</span>(a) = d 则 <span class="built_in">T</span>(N) = N^d * <span class="built_in">logN</span></span><br><span class="line">(<span class="number">2</span>) <span class="built_in">logb</span>(a) &gt; d 则 <span class="built_in">T</span>(N) = N^<span class="built_in">logb</span>(a)</span><br><span class="line">(<span class="number">3</span>) <span class="built_in">logb</span>(a) &lt; d 则 <span class="built_in">T</span>(N) = N^d</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>algo-sort</tag>
      </tags>
  </entry>
</search>
